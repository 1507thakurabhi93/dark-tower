---
- name: Get list of backup
  shell: ls /tmp/
  register: list_backup
        
- name: Print backup list
  debug: var=list_backup.stdout_lines
        
- name: Current installed tower version
  uri:   
    url: https://tower1.{{guid}}.example.opentlc.com/api/v2/ping/
    url_password: "{{ tower_admin_password }}"
    url_username: "{{ tower_username }}"
    method: GET 
    return_content: True
    validate_certs: False
  register: installed_tower
  
- name: Print current version
  debug: var=installed_tower.json.version

- name: fail if retore tower version is different from installed 
  fail: 
    msg: "Version differs"
  when: installed_tower.json.version != tower_version.split('-')[0]

- name: Remove existing setup dir 
  stat:  
    path: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version }}"
  register: status

- debug: var=status

- name: Download tower setup for version {{ tower_version }}
  unarchive:
    src: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-{{ tower_version }}.tar.gz
    dest: "{{ setup_dir }}"
    remote_src: yes 
  when:  status.stat.exists == false
        


- name: Extracting backup file
  unarchive:
    src: /tmp/full_tower_backup-3.5.0-1-2019-06-28-07-46.tar.gz
    dest: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version }}"
    remote_src: yes

- name: Restoring backup
  shell: ./setup.sh -r -e "restore_backup_file={{ setup_dir }}/ansible-tower-setup-{{ tower_version }}/backup_store/tower-backup-latest.tar.gz"
  args:
    chdir: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version }}"

        