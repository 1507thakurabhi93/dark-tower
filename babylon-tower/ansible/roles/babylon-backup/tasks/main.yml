---
# Generating constant backup file name
- name: Generate name for backup file
  set_fact:
    now: '{{ lookup("pipe", "date +%F-%H-%M") }}'

# Gathering Installed Tower version
- name: Current installed tower version
  uri:   
    url: https://tower1.{{guid}}.example.opentlc.com/api/v2/ping/
    url_password: "{{ tower_admin_password }}"
    url_username: "{{ tower_username }}"
    method: GET 
    return_content: True
    validate_certs: False
  register: installed_tower

# Print Tower Version   
- name: Print current version
  debug: var=installed_tower.json.version

# Fail if Installed tower version differs from the specified tower version for backup 
- name: fail if tower version is differs
  fail: 
    msg: "Version differs"
  when: installed_tower.json.version != tower_version.split('-')[0]

# Download Tower setup for specified version 
- name: Download tower setup for version {{ tower_version }}
  unarchive:
    src: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-{{ tower_version }}.tar.gz
    dest: "{{ setup_dir }}"
    remote_src: yes 

# Generate Tower inventory file        
- name: Generate Inventory
  template:
    src: tower_template_inventory.j2
    dest:  "{{ setup_dir }}/ansible-tower-setup-{{ tower_version }}/inventory"  


# Running Backup tower script for specific location 
- name: Run Backup script
  shell: ./setup.sh -b -e "backup_dest={{ setup_dir }}/ansible-tower-setup-{{ tower_version}}/backup_store"
#   shell:  cd {{ setup_dir }}/ansible-tower-setup-{{ tower_version }}; ./setup.sh -b 
  args:
    chdir: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version }}"

# Copy tower inventory file for archive
- name: Copy inventory file into backup_store
  copy:
    src: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version}}/inventory"
    dest: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version}}/backup_store"
    remote_src: yes
             
- name: Creating ansible_pip_requirements.txt
  copy:          
    content: ""  
    dest: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version}}/backup_store/ansible_pip_requirements.txt"
    
# - debug: 
#    msg: "{{ hostvars['localhost']['pip_freeze'] }}"    

- name: Adding content to ansible_pip_requirement.txt file
  lineinfile:    
    line: "{{ item }}"
    path: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version}}/backup_store/ansible_pip_requirements.txt"
    insertafter: 'EOF'
  loop: "{{ hostvars['localhost']['pip_freeze'] }}" 

# # Copy tower venv in backup_store dir
- name:
  command: scp -r ec2-user@tower1.{{guid}}.internal:/var/lib/awx/venv/ansible "{{ setup_dir }}/ansible-tower-setup-{{ tower_version}}/backup_store/ansible"
 

# - name: Synchronization using rsync protocol (pull)
#   synchronize:
#     mode: pull
#     src: rsync://tower1.{{guid}}.internal/var/lib/awx/venv/ansible/
#     dest: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version }}/backup_store"
           
# Archiving backup with all data which is in backup_store directory
- name: Archiving backup
  archive:
    path: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version }}/backup_store"
    dest: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version }}/full_tower_backup-{{ tower_version }}-{{ now }}.tar.gz"
    format: gz
  notify: 
    - remove backup_store

# Upload backup archive   on 3S
- name: upload backup file
  copy:
    src: "{{ setup_dir }}/ansible-tower-setup-{{ tower_version }}/full_tower_backup-{{ tower_version }}-{{ now }}.tar.gz"
    dest: /tmp
    remote_src: yes
  notify: 
    - remove backup_store
    - remove backup tar from setup directory 
        
